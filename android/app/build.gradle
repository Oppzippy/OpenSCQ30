plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
    id 'com.google.dagger.hilt.android'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    signingConfigs {
        if (keystorePropertiesFile.exists()) {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyPassword keystoreProperties['keyPassword']
                keyAlias keystoreProperties['keyAlias']
            }
        }
    }
    namespace 'com.oppzippy.openscq30'
    compileSdk 33

    defaultConfig {
        applicationId "com.oppzippy.openscq30"
        minSdk 24
        targetSdk 33
        versionCode 3
        versionName "1.1.1"
        buildConfigField 'boolean', 'IS_DEMO_MODE', 'false'

        testInstrumentationRunner "com.oppzippy.openscq30.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir 'src/main/libs'
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debugDemo {
            initWith buildTypes.debug
            buildConfigField 'boolean', 'IS_DEMO_MODE', 'true'
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
        releaseDemo {
            initWith buildTypes.release
            buildConfigField 'boolean', 'IS_DEMO_MODE', 'true'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.3"
    }
    ndkVersion "25.2.9519653"
    packagingOptions {
        resources {
            excludes += '/META-INF/*'
        }
    }
}

dependencies {
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation platform('androidx.compose:compose-bom:2023.03.00')
    androidTestImplementation platform('androidx.compose:compose-bom:2023.03.00')
    // Material Design 3
    implementation 'androidx.compose.material3:material3:1.0.1'
    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    // Optional - Included automatically by material, only add when you need
    // the icons but not the material library (e.g. when using Material3 or a
    // custom design system based on Foundation)
    implementation 'androidx.compose.material:material-icons-core'
    // Optional - Add full set of material icons
    implementation 'androidx.compose.material:material-icons-extended'
    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose:1.7.0'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1'
    // Compose navigation
    implementation 'androidx.navigation:navigation-compose:2.5.3'

    implementation 'com.google.accompanist:accompanist-swiperefresh:0.30.1'
    implementation 'com.google.accompanist:accompanist-permissions:0.30.0'

    def room_version = '2.5.1'

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    implementation 'com.google.dagger:hilt-android:2.45'
    kapt 'com.google.dagger:hilt-android-compiler:2.45'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'

    // For instrumentation tests
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.45'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.45'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.45'
    kaptTest 'com.google.dagger:hilt-compiler:2.45'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:1.13.3"
    androidTestImplementation "io.mockk:mockk-android:1.13.3"
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

kapt {
    correctErrorTypes = true
}

def rustBasePath = ".."
def archTriplets = ['armeabi-v7a': 'armv7-linux-androideabi',
                    'arm64-v8a'  : 'aarch64-linux-android',
                    'x86'        : 'i686-linux-android',
                    'x86_64'     : 'x86_64-linux-android',]

archTriplets.each { arch, target ->
    // execute cargo metadata and get path to target directory
    tasks.create(name: "cargo-output-dir-${arch}", description: "Get cargo metadata") {
        new ByteArrayOutputStream().withStream { os ->
            exec {
                commandLine 'cargo', 'metadata', '--format-version', '1'
                workingDir rustBasePath
                standardOutput = os
            }
            def outputAsString = os.toString()
            def json = new groovy.json.JsonSlurper().parseText(outputAsString)

            logger.info("cargo target directory: ${json.target_directory}")
            project.ext.cargo_target_directory = json.target_directory
        }
    }
    // Build with cargo
    tasks.create(name: "cargo-build-${arch}", type: Exec, description: "Building core for ${arch}", dependsOn: "cargo-output-dir-${arch}") {
        workingDir rustBasePath
        commandLine "cargo", "ndk", "--target", "${arch}", "--platform", "24", "build", "--profile", "release-debuginfo"
    }
    // Sync shared native dependencies
    tasks.create(name: "sync-rust-deps-${arch}", type: Sync, dependsOn: "cargo-build-${arch}") {
        from "${rustBasePath}/src/libs/${arch}"
        include "*.so"
        into "src/main/libs/${arch}"
    }
    // Copy build libs into this app's libs directory
    tasks.create(name: "rust-deploy-${arch}", type: Copy, dependsOn: "sync-rust-deps-${arch}", description: "Copy rust libs for (${arch}) to jniLibs") {
        from "${project.ext.cargo_target_directory}/${target}/release-debuginfo"
        include "*.so"
        into "src/main/libs/${arch}"
    }

    // Hook up tasks to execute before building java
    tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn "rust-deploy-${arch}"
    }
    preBuild.dependsOn "rust-deploy-${arch}"

    // Hook up clean tasks
    tasks.create(name: "clean-${arch}", type: Delete, description: "Deleting built libs for ${arch}", dependsOn: "cargo-output-dir-${arch}") {
        delete fileTree("${project.ext.cargo_target_directory}/${target}/release-debuginfo") {
            include '*.so'
        }
    }
    clean.dependsOn "clean-${arch}"
}
